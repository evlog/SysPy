-- fsm_sim_tb.vhd
-- Generated by SysPy
-- Sun Jul 26 21:13:48 2015
-- Author: Evangelos Logaras

---------------------------------------------------------------------------------------------------
-------------------------------------------------------------------0---0000------------------------
--------------------------------------------------------------------0--0----00---------------------
---------------------------------------------------------------------0--0-------00-----------------
-----------------------------------------------------00000000000000000--0---------00---------------
----------------------------------------------------00---------------0--0-----------0--------------
---------------------------------------------------00----------------0--0------------000000000000--
----00000000--------------------------000000000----00----------------0--0------------0----------00-
---00---------------------------------00------000--0-----------0000000--0----------0-------------00
--00----------------------------------00-------00--00--------00------0--0--------00--------------00
--00-----------00-------0----00000----00-------00--00-------00-------0-0------00-----------------00
---000---------00------00---00--------00------000---00------0-------0--000000--------------------00
-----000000-----00----00---00---------000000000-----00-----00------------------------------------00
---------000-----0----00----0000------000------------00---00-------------------------------------00
-----------00----00--00--------0000---00--------------0---0--------------------------------------00
-----------00-----00-0-----------00---00--------------00-00--------------------------------------00
----------00------0000-----------00---00---------------000---------------------------------------00
--000000000--------00-------000000----00---------------000---------------------------------------00
-------------------00-----------------00---------------00----------------------------------------00
------------------00------------------00---------------0-----------------------------------------00
------------------0-------------------00--------------00-----------------------------------------00
-----------------0--------------------00--------------0------------------------------------------00
---------------------------------------00--------------------------------------------------------00
----------------------------------------0000000000000000000000000000000000000000000000000000000000-
-----------------------------------------00000000000000000000000000000000000000000000000000000000--
---------------------------------------------------------------------------------------------------


library IEEE;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

-- Entity declaration
entity fsm_sim_tb is
end fsm_sim_tb;

architecture behavior of fsm_sim_tb is
	-- Component Declaration for the Unit Under Test (UUT)
	component fsm_sim
	port (
		rst: in std_logic;
		clk: in std_logic;
		start: in std_logic;
		rst: std_logic;
		clk: std_logic;
		start: std_logic;
		input_fifo_ready: out std_logic;
		output_fifo_ready: out std_logic;
		state: out std_logic_vector(0 to 5);
		filt_out3: out std_logic_vector(0 to 16);
		filt_out1: out std_logic_vector(0 to 16);
		filt_out2: out std_logic_vector(0 to 16);
		filt_out0: out std_logic_vector(0 to 16);
		sim_time: out std_logic_vector(0 to 31);
		data_counter: out std_logic_vector(0 to 31));
	end component;

	-- Clock period definition
	constant clock_period: time := 1ns;
begin

	uut: fsm_sim port map (
		rst => rst,
		clk => clk,
		start => start,
		rst => rst,
		clk => clk,
		start => start,
		input_fifo_ready => input_fifo_ready,
		output_fifo_ready => output_fifo_ready,
		state => state,
		filt_out3 => filt_out3,
		filt_out1 => filt_out1,
		filt_out2 => filt_out2,
		filt_out0 => filt_out0,
		sim_time => sim_time,
		data_counter => data_counter
		);

	-- Clock process with 50% duty cycle
	clock_process: process
	begin
		<clock_name> <= '0'
		wait for clock_period / 2;
		<clock_name> <= '1'
		wait for clock_period / 2;
	end process;

	-- Stimulus process
	stimulus_process: process
	begin
		-- Enter your testbench stimulus here
	end process;

end;