import _MyExceptions
reload(_MyExceptions) 
import time
from pdb import *
def entity_header(func, vhdFile, args, attributes, generics, simulation_attr_flag, config_options):
       """
       FUNCTION: entity_header(a str, b file, c(), d{}, e{}, f int, g{})
              a: string name of the design function
              b: VHDL output file 
              c: tupple containing the signal statements
              d: dictionary containing design's attributes
              e: dictionary containing design's generic parameters
              f: integer simulation flag
              g: dictionary containing configuration file paths

              
       Libraries statement of the *.vhd file.
       - Libraries definitions for the *.vdh file.
       - Extraction of the I/O signals.
       """
       
# Python's variable declarations
#----------------------------------------------------------------------------------------------------------------------------------
       signals_i = [] # input signals list
       signals_o = [] # output signals list
       signals_inout = [] # inout signals list
       signals_io = [] # I/O signals list (in, out, inout)
       signals_intr = [] # internal signals list
       signals_sim = [] # simulation values list
       variables = [] # variables list
       signals = [] #signals list
       generics_keys = []
       attributes_sup = {"sign": ['+', '-'], "simulation": ["integer", "integer", ['s', "ms", "us", "ns", "ps"]], "FPGA_DEV": ["Virtex5", "Spartan3"], "PROC_SW": ["none"], "PROC_OS": ["none"], "FSM_STYLE": ["string", ["lut", "bram"]], "MUX_EXTRACT": ["string", ["yes", "no", "force"]], "SYS_FREQ": ["none"], "PROC_FREQ": ["none"]}
       attributes_keys = []
#----------------------------------------------------------------------------------------------------------------------------------

# SysPy info for the *.vdh file
#----------------------------------------------------------------------------------------------------------------------------------
       if (simulation_attr_flag == 0):
              vhdFile.write("-- " + func + ".vhd\n")
              vhdFile.write("-- Generated by SysPy\n")
              vhdFile.write("-- " + time.ctime() + "\n\n")
              logoFile = open(config_options["syspy_dir"] + "/funcs/SysPy_logo.txt", 'r')
              logo = logoFile.read()
              vhdFile.write(logo)
#----------------------------------------------------------------------------------------------------------------------------------

# libraries definitions for the *.vdh file
#----------------------------------------------------------------------------------------------------------------------------------
       if (simulation_attr_flag == 0):
              vhdFile.write("\n\nlibrary IEEE;\n")
              vhdFile.write("use ieee.std_logic_1164.all;\n")
              vhdFile.write("use ieee.std_logic_arith.all;\n")

              attributes_keys = attributes.keys()
              attributes_sup_keys = attributes_sup.keys()

              sign_attr_flag = 0
              attr_flag = 0
              FPGA_attr_flag = 0
              a = ''
              for i in range(len(attributes_keys)):
                     if (attributes_keys[i] == "sign"):
                            sign_attr_flag = 1

                     if (attributes_keys[i] == "FPGA_DEV"):
                            a = attributes[attributes_keys[i]]
                            FPGA_attr_flag = 1
                            attr_flag = 0

                            for j in range(len(attributes_sup_keys)):
                                   if (attributes_keys[i] == attributes_sup_keys[j]):
                                          b = attributes_sup[attributes_sup_keys[j]]
                                          print("a, b:", a, b)
                                          #set_trace()
                                          for k in range(len(b)):
                                                 if (a == b[k]):
                                                        attr_flag = 1

              if ((FPGA_attr_flag == 1) and (attr_flag == 0)):
                     raise _MyExceptions.MyExceptions("File: \"" +  func +".py\": " + "Value \"" + str(a) + "\" not supported for attribute \" FPGA_DEV \".")

              if (sign_attr_flag == 0):      
                     if (attributes["sign"] == '+'):
                            vhdFile.write("use ieee.std_logic_unsigned.all;\n\n")
                     elif (attributes["sign"] == '-'):
                            vhdFile.write("use ieee.std_logic_signed.all;\n\n")
                     else:
                            raise _MyExceptions.MyExceptions("File: \"" +  func +".py\": " + "Value \"" + str(attributes["sign"]) + "\" is not supported for attribute \"sign\".")
              elif (sign_attr_flag == 0):
                     vhdFile.write("use ieee.std_logic_unsigned.all;\n\n")


              elif (sign_attr_flag == 0):
                     vhdFile.write("use ieee.std_logic_unsigned.all;\n\n")

              vhdFile.write("library work;\n")
              #vhdFile.write("use work.PySys_lib.all;\n\n")
              
              vhdFile.write("entity " + func + " is\n")

# generics declaration
#----------------------------------------------------------------------------------------------------------------------------------
              gen_flag = 0

              generics_keys = generics.keys()

              for i in range(len(generics_keys)):
                     if (generics_keys[i] == func):
                            gen_flag = 1

              #if (len(generics_keys) > 0):
              if (gen_flag == 1):
                     generics_keys = generics[func].keys()
                     vhdFile.write("\tgeneric (\n")

                     for i in range(len(generics_keys)):
                            if (i == (len(generics_keys) - 1)):
                                   vhdFile.write("\t\t" + generics_keys[i] + " : integer := " + str(generics[generics_keys[i]]) + ");\n")
                            else:
                                   vhdFile.write("\t\t" + generics_keys[i] + " : integer := " + str(generics[generics_keys[i]]) + ";\n")
#----------------------------------------------------------------------------------------------------------------------------------

              vhdFile.write("\tport (\n")
#----------------------------------------------------------------------------------------------------------------------------------

# copy of the signals to the appropriate signal list
#----------------------------------------------------------------------------------------------------------------------------------
       for i in range(len(args) - 1):
              #if (args[i]['T'] != "sim"):
                     n = args[i]['N'].__doc__
                     L = args[i]['L'].__doc__
                     if ((args[i]['D'] == 'i') or (args[i]['D'] == "sim")):
                            if (L.find("int") == 0):
                                   if (n.find("list") == 0):
                                          for j in range(len(args[i]['N'])):
                                                 if (args[i].has_key('V') == False):
                                                        signals_i.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
                                                 ## For "sim" signals
                                                 elif (args[i].has_key('V') == True):
                                                        signals_i.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j], 'V': args[i]['V'][j]})
                                          #xt_N.append({'D': xt['D'], 'T': xt['T'], 'L': xt['L'], 'N': xt['N'][0]})
                                   elif (n.find("str") == 0):
                                          if (args[i].has_key('V') == False):
                                                 signals_i.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})
                                          ## For "sim" signals
                                          elif (args[i].has_key('V') == True):
                                                 signals_i.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'], 'V': args[i]['V']})
                     elif (args[i]['D'] == 'o') :
                            if (L.find("int") == 0):
                                   if (n.find("list") == 0):
                                          for j in range(len(args[i]['N'])):
                                                 if (args[i].has_key("del") == True):
                                                        signals_o.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'del': args[i]['del'], 'N': args[i]['N'][j]})
                                                 elif (args[i].has_key("del") == False):
                                                        signals_o.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
                                          #xt_N.append({'D': xt['D'], 'T': xt['T'], 'L': xt['L'], 'N': xt['N'][0]})
                                   elif (n.find("str") == 0):
                                          if (args[i].has_key("del") == True):
                                                 signals_o.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'del': args[i]['del'], 'N': args[i]['N']})
                                          elif (args[i].has_key("del") == False):
                                                 signals_o.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})

                     elif (args[i]['D'] == "io") :
                            if (L.find("int") == 0):
                                   if (n.find("list") == 0):
                                          for j in range(len(args[i]['N'])):
                                                 signals_inout.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
                                          #xt_N.append({'D': xt['D'], 'T': xt['T'], 'L': xt['L'], 'N': xt['N'][0]})
                                   elif (n.find("str") == 0):
                                          signals_inout.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})


       for i in range(len(args) - 1):
              #if (args[i]['T'] != "sim"):
              n = args[i]['N'].__doc__
              L = args[i]['L'].__doc__
              if ((args[i]['D'] == 'i') or (args[i]['D'] == "sim")):
                     if (L.find("list") == 0):
                            if (args[i].has_key('V') == False):
                                   if (n.find("list") == 0):
                                          for j in range(len(args[i]['N'])):
                                                 signals_i.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
                                          #xt_N.append({'D': xt['D'], 'T': xt['T'], 'L': xt['L'], 'N': xt['N'][0]})
                                   elif (n.find("str") == 0):
                                          signals_i.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})
                            elif (args[i].has_key('V') == True):
                                   if (n.find("list") == 0):
                                          for j in range(len(args[i]['N'])):
                                                 signals_i.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j], 'V': args[i]['V'][j]})
                                          #xt_N.append({'D': xt['D'], 'T': xt['T'], 'L': xt['L'], 'N': xt['N'][0]})
                                   elif (n.find("str") == 0):
                                          signals_i.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'], 'V': args[i]['V']})

              elif (args[i]['D'] == 'o') :
                     if (L.find("list") == 0):
                            if (n.find("list") == 0):
                                   for j in range(len(args[i]['N'])):
                                          if (args[i].has_key("del") == True):
                                                 signals_o.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'del': args[i]['del'], 'N': args[i]['N'][j]})
                                          elif (args[i].has_key("del") == False):
                                                 signals_o.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
                                   #xt_N.append({'D': xt['D'], 'T': xt['T'], 'L': xt['L'], 'N': xt['N'][0]})
                            elif (n.find("str") == 0):
                                   if (args[i].has_key("del") == True):
                                          signals_o.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'del': args[i]['del'], 'N': args[i]['N']})
                                   elif (args[i].has_key("del") == False):			
                                          signals_o.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})

              elif (args[i]['D'] == "io") :
                     if (L.find("list") == 0):
                            if (n.find("list") == 0):
                                   for j in range(len(args[i]['N'])):
                                          signals_inout.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
                                   #xt_N.append({'D': xt['D'], 'T': xt['T'], 'L': xt['L'], 'N': xt['N'][0]})
                            elif (n.find("str") == 0):
                                   signals_inout.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})

              signals_io = signals_i + signals_o + signals_inout
       ##              if (args[i]['D'] == 'o') :
       ##                     if (n.find("list") == 0):
       ##                            for j in range(len(args[i]['N'])):
       ##                                   signals_o.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
       ##                     elif (n.find("str") == 0):
       ##                            signals_o.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})
       ##                     #signals_o.append(args[i])
       ##              if (args[i]['D'] == 'i' or args[i]['D'] == 'o') :
       ##                     if (n.find("list") == 0):
       ##                            for j in range(len(args[i]['N'])):
       ##                                   signals_io.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
       ##                     elif (n.find("str") == 0):
       ##                            signals_io.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})
       ##                     #signals_io.append(args[i])

       for i in range(len(args) - 1):
              if (args[i]['T'] != "sim"):
                     if (args[i]['D'] == 'intr') :
                            if (args[i]['T'] == 'b'):
                                   L = args[i]['L'].__doc__
                                   n = args[i]['N'].__doc__
                                   if (L.find("int") == 0):
                                          if (n.find("list") == 0):
                                                 for j in range(len(args[i]['N'])):
                                                        if (args[i].has_key('V') == True):
                                                               signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j], 'V': args[i]['V']})
                                                        elif (args[i].has_key('V') == False):
                                                               signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
                                          elif (n.find("str") == 0):
                                                  if (args[i].has_key('V') == True):
                                                        signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'], 'V': args[i]['V']})
                                                  elif (args[i].has_key('V') == False):
                                                        signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})
                     elif (args[i]['D'] == 'v') :
                            if (args[i]['T'] == 'b'):
                                   L = args[i]['L'].__doc__
                                   n = args[i]['N'].__doc__
                                   if (L.find("int") == 0):
                                          if (n.find("list") == 0):
                                                 for j in range(len(args[i]['N'])):
                                                        if (args[i].has_key('V') == True):
                                                               variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j], 'V': args[i]['V']})
                                                        elif (args[i].has_key('V') == False):
                                                               variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
                                          elif (n.find("str") == 0):
                                                  if (args[i].has_key('V') == True):
                                                        variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'], 'V': args[i]['V']})
                                                  elif (args[i].has_key('V') == False):
                                                        variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})
                     

       for i in range(len(args) - 1):
              if (args[i]['T'] != "sim"):
                     if (args[i]['D'] == 'intr') :
                            if (args[i]['T'] == 'b'):
                                   L = args[i]['L'].__doc__
                                   n = args[i]['N'].__doc__
                                   if (L.find("list") == 0):
                                          if (n.find("list") == 0):
                                                 for j in range(len(args[i]['N'])):
                                                        if (args[i].has_key('V') == True):
                                                               signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j], 'V': args[i]['V']})
                                                        elif (args[i].has_key('V') == False):
                                                               signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
                                          elif (n.find("str") == 0):
                                                  if (args[i].has_key('V') == True):
                                                        signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'], 'V': args[i]['V']})
                                                  elif (args[i].has_key('V') == False):
                                                        signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})
                     elif (args[i]['D'] == 'v') :
                            if (args[i]['T'] == 'b'):
                                   L = args[i]['L'].__doc__
                                   n = args[i]['N'].__doc__
                                   if (L.find("list") == 0):
                                          if (n.find("list") == 0):
                                                 for j in range(len(args[i]['N'])):
                                                        if (args[i].has_key('V') == True):
                                                               variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j], 'V': args[i]['V']})
                                                        elif (args[i].has_key('V') == False):
                                                               variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
                                          elif (n.find("str") == 0):
                                                  if (args[i].has_key('V') == True):
                                                        variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'], 'V': args[i]['V']})
                                                  elif (args[i].has_key('V') == False):
                                                        variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})

       for i in range(len(args) - 1):
              if (args[i]['T'] != "sim"):
                     if (args[i]['D'] == 'intr') :
                            if (args[i]['T'] == 'int'):
                                   n = args[i]['N'].__doc__
                                   if (n.find("list") == 0):
                                          for j in range(len(args[i]['N'])):
                                                 if (args[i].has_key('V') == True):
                                                        signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j], 'V': args[i]['V']})
                                                 elif (args[i].has_key('V') == False):
                                                        signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
                                   elif (n.find("str") == 0):
                                           if (args[i].has_key('V') == True):
                                                 signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'], 'V': args[i]['V']})
                                           elif (args[i].has_key('V') == False):
                                                 signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})
                     elif (args[i]['D'] == 'v') :
                            if (args[i]['T'] == 'int'):
                                   n = args[i]['N'].__doc__
                                   if (n.find("list") == 0):
                                          for j in range(len(args[i]['N'])):
                                                 if (args[i].has_key('V') == True):
                                                        variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j], 'V': args[i]['V']})
                                                 elif (args[i].has_key('V') == False):
                                                        variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
                                   elif (n.find("str") == 0):
                                           if (args[i].has_key('V') == True):
                                                 variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'], 'V': args[i]['V']})
                                           elif (args[i].has_key('V') == False):
                                                 variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})

       for i in range(len(args) - 1):
              if (args[i]['T'] != "sim"):
                     if (args[i]['D'] == 'intr') :
                            if (args[i]['T'] == "arrb"):
                                   n = args[i]['N'].__doc__
                                   if (n.find("list") == 0):
                                          for j in range(len(args[i]['N'])):
                                                 if (args[i].has_key('V') == True):
                                                        signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j], 'V': args[i]['V']})
                                                 elif (args[i].has_key('V') == False):
                                                        signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
                                   elif (n.find("str") == 0):
                                           if (args[i].has_key('V') == True):
                                                 signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'], 'V': args[i]['V']})
                                           elif (args[i].has_key('V') == False):
                                                 signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})
                     elif (args[i]['D'] == 'v') :
                            if (args[i]['T'] == "arrb"):
                                   n = args[i]['N'].__doc__
                                   if (n.find("list") == 0):
                                          for j in range(len(args[i]['N'])):
                                                 if (args[i].has_key('V') == True):
                                                        variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j], 'V': args[i]['V']})
                                                 elif (args[i].has_key('V') == False):
                                                        variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
                                   elif (n.find("str") == 0):
                                           if (args[i].has_key('V') == True):
                                                 variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'], 'V': args[i]['V']})
                                           elif (args[i].has_key('V') == False):
                                                 variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})

       for i in range(len(args) - 1):
              if (args[i]['T'] != "sim"):
                     if (args[i]['D'] == 'intr') :
                            if (args[i]['T'] == "arri"):
                                   n = args[i]['N'].__doc__
                                   if (n.find("list") == 0):
                                          for j in range(len(args[i]['N'])):
                                                 if (args[i].has_key('V') == True):
                                                        signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j], 'V': args[i]['V']})
                                                 elif (args[i].has_key('V') == False):
                                                        signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
                                   elif (n.find("str") == 0):
                                           if (args[i].has_key('V') == True):
                                                 signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'], 'V': args[i]['V']})
                                           elif (args[i].has_key('V') == False):
                                                 signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})
                     elif (args[i]['D'] == 'v') :
                            if (args[i]['T'] == "arri"):
                                   n = args[i]['N'].__doc__
                                   if (n.find("list") == 0):
                                          for j in range(len(args[i]['N'])):
                                                 if (args[i].has_key('V') == True):
                                                        variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j], 'V': args[i]['V']})
                                                 elif (args[i].has_key('V') == False):
                                                        variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
                                   elif (n.find("str") == 0):
                                           if (args[i].has_key('V') == True):
                                                 variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'], 'V': args[i]['V']})
                                           elif (args[i].has_key('V') == False):
                                                 variables.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})

       for i in range(len(args) - 1):
              if (args[i]['T'] != "sim"):
                     if ((args[i].has_key('V') == True) and (args[i]['T'] == 's')):
                            n = args[i]['N'].__doc__
                            if (n.find("str") == 0):
                                   signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'], 'V': args[i]['V']})
                            elif (n.find("list") == 0):
                                   for j in range(len(args[i]['N'])):
                                          signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j], 'V': args[i]['V']})
                            v = args[i]['V'].__doc__
                            if (v.find("list") == 0):
                                   for j in range(len(args[i]['V'])):    
                                          signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['V'][j]})
                            elif (v.find("str") == 0):
                                   signals_intr.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['V']})
                                   
                     #signals.append(args[i])
       ##              if (n.find("list") == 0):
       ##                     for j in range(len(args[i]['N'])):
       ##                            signals.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N'][j]})
       ##              elif (n.find("str") == 0):
       ##                     signals.append({'D': args[i]['D'], 'T': args[i]['T'], 'L': args[i]['L'], 'N': args[i]['N']})
                     signals = signals_io + signals_intr + variables
                     
       print("signals_intr:", signals_intr)
       print("signals:", signals)
       print("signals_i:", signals_i)
       print("signals_o:", signals_o)
       print("signals_io:", signals_io)
       print("variables:", variables)
#----------------------------------------------------------------------------------------------------------------------------------

# extraction of the I/O signals for the entity declarations
#----------------------------------------------------------------------------------------------------------------------------------
       if (simulation_attr_flag == 0):
              for i in range(len(signals_io)):
                     vhdFile.write("\t\t" + signals_io[i]['N'] + ": ")
                     L = signals_io[i]['L'].__doc__
                     if (signals_io[i]['D'] == 'i'):
                            vhdFile.write("in ")
                     elif (signals_io[i]['D'] == 'o'):
                            vhdFile.write("out ")
                     elif (signals_io[i]['D'] == "io"):
                            vhdFile.write("inout ")
              
                     if (i != (len(signals_io) - 1)):
                            if (L.find("int") == 0):
                                     vhdFile.write("std_logic;\n")
                            elif (L.find("list") == 0):
                                   if (signals_io[i]['L'][0] > signals_io[i]['L'][1]): 
                                          vhdFile.write("std_logic_vector(" + str(signals_io[i]['L'][0]) + " downto " + str(signals_io[i]['L'][1]) + ");\n")
                                   else:
                                          vhdFile.write("std_logic_vector(" + str(int(signals_io[i]['L'][0])) + " to " + str(int(signals_io[i]['L'][1])) + ");\n")
                     else:
                            if (L.find("int") == 0):
                                    vhdFile.write("std_logic);\n")
                            elif (L.find("list") == 0):
                                   if (signals_io[i]['L'][0] > signals_io[i]['L'][1]): 
                                          vhdFile.write("std_logic_vector(" + str(signals_io[i]['L'][0]) + " downto " + str(int(signals_io[i]['L'][1])) + "));\n")
                                   else:
                                          vhdFile.write("std_logic_vector(" + str(int(signals_io[i]['L'][0])) + " to " + str(int(signals_io[i]['L'][1])) + "));\n")
#----------------------------------------------------------------------------------------------------------------------------------

# Attributes' declaration
#----------------------------------------------------------------------------------------------------------------------------------       
       if (simulation_attr_flag == 0):
              for i in range(len(attributes_keys)):
                     attr_flag = 0
                     for j in range(len(attributes_sup_keys)):
                            if (attributes_keys[i] == attributes_sup_keys[j]):
                                   attr_flag = 1
                     if (attr_flag == 0):
                            raise _MyExceptions.MyExceptions("File: \"" +  func +".py\": " + "Attribute \"" + str(attributes_keys[i]) + "\" not supported.")

              for i in range(len(attributes_keys)):
                     if ((attributes_keys[i] != "sign") and (attributes_keys[i] != "FPGA_DEV") and (attributes_keys[i] != "PROC_OS") and (attributes_keys[i] != "PROC_SW") and (attributes_keys[i] != "simulation") and (attributes_keys[i] != "SYS_FREQ") and (attributes_keys[i] != "PROC_FREQ")):
                            a = attributes[attributes_keys[i]]
                            attr_flag = 0
                            for j in range(len(attributes_sup_keys)):
                                   if (attributes_keys[i] == attributes_sup_keys[j]):
                                          b = attributes_sup[attributes_sup_keys[j]][1]
                                          print(a, b)
                                          #set_trace()
                                          for k in range(len(b)):
                                                 if (a == b[k]):
                                                        attr_flag = 1

                     if (attr_flag == 0):
                            raise _MyExceptions.MyExceptions("File: \"" +  func +".py\": " + "Value \"" + str(a) + "\" not supported for attribute \"" + str(attributes_keys[i]) + "\".")

              for i in range(len(attributes_keys)):
                     if (attributes_keys[i] == "simulation"):
                            a = attributes["simulation"]
                            b = attributes_sup["simulation"]
                            attr_flag = 0
                            n = a.__doc__
                            
                            if (n.find("list") != 0):
                                   for k in range(len(b[0])):
                                          if (a == b[0][k]):
                                                 attr_flag = 1                               

                                   if (attr_flag == 0):
                                          raise _MyExceptions.MyExceptions("File: \"" +  func +".py\": " + "Value \"" + str(a) + "\" not supported for attribute \"" + str(attributes_keys[i]) + "\".")

                            elif (n.find("list") == 0):
                                   for j in range(len(b)):
                                          attr_flag = 0
                            #              if (j == 0):
                            #                     for k in range(len(b[j])):
                            #                            if (a[0] == b[j][k]):
                            #                                   attr_flag = 1                   
                            #
                            #                     if (attr_flag == 0):
                            #                            raise _MyExceptions.MyExceptions("File: \"" +  func +".py\": " + "Value \"" + str(a[j]) + "\" not supported for attribute \"" + str(attributes_keys[i]) + "\".")
                                          
                                          if (j == 0):
                                                 n = a[0].__doc__
                                                 if (n.find("int") == 0):
                                                        if (a[0] >= 0):
                                                               attr_flag = 1                   

                                                 if (attr_flag == 0):
                                                        raise _MyExceptions.MyExceptions("File: \"" +  func +".py\": " + "Value \"" + str(a[1][0]) + "\" not supported for simulation time.")

                                          elif (j == 1):
                                                 n = a[1].__doc__
                                                 if ((n.find("int") == 0)):
                                                        if (a[1] >= 0):
                                                               attr_flag = 1                     

                                                 if (attr_flag == 0):
                                                        raise _MyExceptions.MyExceptions("File: \"" +  func +".py\": " + "Value \"" + str(a[1][1]) + "\" not supported for simulation time.")

                                          elif (j == 2):
                                                 for k in range(len(b[j])):
                                                        if (a[2] == b[j][k]):
                                                               attr_flag = 1                   

                                                 if (attr_flag == 0):
                                                        raise _MyExceptions.MyExceptions("File: \"" +  func +".py\": " + "Value \"" + str(a[1][2]) + "\" not supported for attribute \"" + str(attributes_keys[i]) + "\".")

              for i in range(len(attributes_keys)):
                     if ((attributes_keys[i] != "sign") and (attributes_keys[i] != "FPGA_DEV") and (attributes_keys[i] != "PROC_OS") and (attributes_keys[i] != "PROC_SW") and (attributes_keys[i] != "simulation") and (attributes_keys[i] != "SYS_FREQ") and (attributes_keys[i] != "PROC_FREQ")):
                            if (i == 0):
                                    vhdFile.write("\t\t-- XST constraints\n")
                                    vhdFile.write("\t\t----------------------------------------------------------\n")
                            a = attributes[attributes_keys[i]]
                            for j in range(len(attributes_sup_keys)):
                                   if (attributes_keys[i] == attributes_sup_keys[j]):
                                          b = attributes_sup[attributes_sup_keys[j]][0]
                                          vhdFile.write("\t\tattribute " + attributes_keys[i] + ": " + b + ";\n")
                                          vhdFile.write("\t\tattribute " + attributes_keys[i] + " of " + func + ": entity is \"" + a + "\";\n")
                            if (i == (len(attributes_keys) - 2)):
                                    vhdFile.write("\t\t----------------------------------------------------------\n")

# keywords declaration for VHDL
#----------------------------------------------------------------------------------------------------------------------------------
       if (simulation_attr_flag == 0):
              vhdFile.write("end " + func + ";\n\n")
              vhdFile.write("architecture " + func + "_arch of " + func + " is \n\n")
              vhdFile.write("-- Internal signals\n")
              vhdFile.write("--------------------------------------------------------------------------\n")
#----------------------------------------------------------------------------------------------------------------------------------

# extraction of the internal signals for the architecture body declerations
#----------------------------------------------------------------------------------------------------------------------------------
       if (simulation_attr_flag == 0):
              count0 = 0
              count1 = 0
              for i in range(len(signals_intr)):
              #for i in range(len(args) - 1):
                     n = signals_intr[i]['N'].__doc__
                     L = signals_intr[i]['L'].__doc__
                     if (signals_intr[i]['D'] == "intr"):       
                            if (signals_intr[i]['T'] == 'b') :
                                   if (L.find("int") == 0):
                                          if (n.find("list") == 0):
                                                 for j in range(len(signals_intr[i]['N'])):
                                                        if (signals_intr[i].has_key('V') == False):
                                                               vhdFile.write("signal " + signals_intr[i]['N'][j] + ": " + "std_logic;\n")
                                                        elif (signals_intr[i].has_key('V') == True):
                                                               vhdFile.write("signal " + signals_intr[i]['N'][j] + ": " + "std_logic := '" + signals_intr[i]['V'] + "';\n")
                                          elif (n.find("str") == 0):
                                                 if (signals_intr[i].has_key('V') == False):
                                                        vhdFile.write("signal " + signals_intr[i]['N'] + ": " + "std_logic;\n")
                                                 elif (signals_intr[i].has_key('V') == True):
                                                        vhdFile.write("signal " + signals_intr[i]['N'] + ": " + "std_logic := '" + signals_intr[i]['V'] + "';\n")
                                   elif (L.find("list") == 0):
                                          if (n.find("list") == 0):
                                                 for j in range(len(signals_intr[i]['N'])):
                                                        if (signals_intr[i].has_key('V') == False):
                                                               if (signals_intr[i]['L'][0] > signals_intr[i]['L'][1]): 
                                                                      vhdFile.write("signal " + signals_intr[i]['N'][j] + ": " + "std_logic_vector(" + str(int(signals_intr[i]['L'][0])) + " downto " + str(int(signals_intr[i]['L'][1])) + ");\n")
                                                               else:
                                                                      vhdFile.write("signal " + signals_intr[i]['N'][j] + ": " + "std_logic_vector(" + str(int(signals_intr[i]['L'][0])) + " to " + str(int(signals_intr[i]['L'][1])) + ");\n")                                                                                                                     
                                                        elif (signals_intr[i].has_key('V') == True):
                                                               if (signals_intr[i]['L'][0] > signals_intr[i]['L'][1]): 
                                                                      vhdFile.write("signal " + signals_intr[i]['N'][j] + ": " + "std_logic_vector(" + str(int(signals_intr[i]['L'][0])) + " downto " + str(int(signals_intr[i]['L'][1])) + ") := \"" + signals_intr[i]['V'] + "\";\n")
                                                               else:
                                                                      vhdFile.write("signal " + signals_intr[i]['N'][j] + ": " + "std_logic_vector(" + str(int(signals_intr[i]['L'][0])) + " to " + str(int(signals_intr[i]['L'][1])) + ") := \"" + signals_intr[i]['V'] + "\";\n")                                                                                                                  
                                          elif (n.find("str") == 0):
                                                 if (signals_intr[i].has_key('V') == False):
                                                        if (signals_intr[i]['L'][0] > signals_intr[i]['L'][1]):                                                                                                                               
                                                               vhdFile.write("signal " + signals_intr[i]['N'] + ": " + "std_logic_vector(" + str(int(signals_intr[i]['L'][0])) + " downto " + str(int(signals_intr[i]['L'][1])) +");\n")
                                                        else:
                                                               vhdFile.write("signal " + signals_intr[i]['N'] + ": " + "std_logic_vector(" + str(int(signals_intr[i]['L'][0])) + " to " + str(int(signals_intr[i]['L'][1])) +");\n")
                                                 elif (signals_intr[i].has_key('V') == True):
                                                        if (signals_intr[i]['L'][0] > signals_intr[i]['L'][1]):  
                                                               vhdFile.write("signal " + signals_intr[i]['N'] + ": " + "std_logic_vector(" + str(signals_intr[i]['L'][0]) + " downto " + str(signals_intr[i]['L'][1]) + ") := \"" + signals_intr[i]['V'] + "\";\n")
                                                        else:
                                                               vhdFile.write("signal " + signals_intr[i]['N'] + ": " + "std_logic_vector(" + str(int(signals_intr[i]['L'][0])) + " to " + str(int(signals_intr[i]['L'][1])) + ") := \"" + signals_intr[i]['V'] + "\";\n")

                            elif (signals_intr[i]['T'] == "int"):
                                   if (n.find("str") == 0):
                                          if (signals_intr[i].has_key('V') == False):
                                                 vhdFile.write("signal " + signals_intr[i]['N'] + ": " + "integer range " + str(signals_intr[i]['L'][0]) + " to " + str(signals_intr[i]['L'][1]) + ";\n")
                                          elif (signals_intr[i].has_key('V') == True):
                                                 vhdFile.write("signal " + signals_intr[i]['N'] + ": " + "integer range " + str(signals_intr[i]['L'][0]) + " to " + str(signals_intr[i]['L'][1]) + " := " + str(signals_intr[i]['V']) + ";\n")
                                   elif (n.find("list") == 0):
                                          for j in range(len(signals_intr[i]['N'])):      
                                                 if (signals_intr[i].has_key('V') == False):
                                                        vhdFile.write("signal " + signals_intr[i]['N'][j] + ": " + "integer range " + str(signals_intr[i]['L'][0]) + " to " + str(signals_intr[i]['L'][1]) + ";\n")
                                                 elif (signals_intr[i].has_key('V') == True):
                                                        vhdFile.write("signal " + signals_intr[i]['N'][j] + ": " + "integer range " + str(signals_intr[i]['L'][0]) + " to " + str(signals_intr[i]['L'][1]) + " := " + str(signals_intr[i]['V']) + ";\n")

                            elif (signals_intr[i]['T'] == "arrb"):
                                   if (n.find("str") == 0):
                                          if (signals_intr[i]['L'][1][0] > signals_intr[i]['L'][1][1]):
                                                 vhdFile.write("type type" + str(count0) + " is array (" + str(signals_intr[i]['L'][0][0]) + " to " + str(signals_intr[i]['L'][0][1]) + ") of std_logic_vector(" + str(signals_intr[i]['L'][1][0]) + " downto " + str(signals_intr[i]['L'][1][1]) + ");\n")
                                          elif (signals_intr[i]['L'][1][0] < signals_intr[i]['L'][1][1]):
                                                 vhdFile.write("type type" + str(count0) + " is array (" + str(signals_intr[i]['L'][0][0]) + " to " + str(signals_intr[i]['L'][0][1]) + ") of std_logic_vector(" + str(signals_intr[i]['L'][1][0]) + " to " + str(signals_intr[i]['L'][1][1]) + ");\n")

                                          if (signals_intr[i].has_key('V') == False):
                                                 vhdFile.write("signal " + signals_intr[i]['N'] + ": " + "type" + str(count0) + ";\n")
                                          elif (signals_intr[i].has_key('V') == True):
                                                 v = signals_intr[i]['V'].__doc__
                                                 if (v.find("str") == 0):
                                                         vhdFile.write("signal " + signals_intr[i]['N'] + ": " + "type" + str(count0) + ": \"" + signals_intr[i]['V'] + "\";\n")
                                                 elif(v.find("list") == 0):
                                                        vhdFile.write("signal " + signals_intr[i]['N'] + ": " + "type" + str(count0) + ': {')
                                                        for j in range(0, (signals_intr[i]['L'][0][1] + 1)):
                                                               if (j == signals_intr[i]['L'][0][1]):
                                                                      vhdFile.write("\"" + signals_intr[i]['V'][j] + "\"};\n")
                                                               elif (j != signals_intr[i]['L'][0][1]):
                                                                      vhdFile.write("\"" + signals_intr[i]['V'][j] + "\", ")
                                   count0 = count0 + 1

                            elif (signals_intr[i]['T'] == "arri"):
                                   if (n.find("str") == 0):
                                          vhdFile.write("type type" + str(count0) + " is array (" + str(signals_intr[i]['L'][0][0]) + " to " + str(signals_intr[i]['L'][0][1]) + ") of integer range " + str(signals_intr[i]['L'][1][0]) + " to " + str(signals_intr[i]['L'][1][1]) + ";\n")
                                 
                                          if (signals_intr[i].has_key('V') == False):
                                                 vhdFile.write("signal " + signals_intr[i]['N'] + ": " + "type" + str(count0) + ";\n")
                                          elif (signals_intr[i].has_key('V') == True):
                                                 v = signals_intr[i]['V'].__doc__
                                                 if (v.find("str") == 0):
                                                         vhdFile.write("signal " + signals_intr[i]['N'] + ": " + "type" + str(count0) + ": " + str(signals_intr[i]['V']) + ";\n")
                                                 elif(v.find("list") == 0):
                                                        vhdFile.write("signal " + signals_intr[i]['N'] + ": " + "type" + str(count0) + ': {')
                                                        for j in range(0, (signals_intr[i]['L'][0][1] + 1)):
                                                               if (j == signals_intr[i]['L'][0][1]):
                                                                      vhdFile.write(str(signals_intr[i]['V'][j]) + "};\n")
                                                               elif (j != signals_intr[i]['L'][0][1]):
                                                                      vhdFile.write(str(signals_intr[i]['V'][j]) + ", ")
                                   count0 = count0 + 1

              for i in range(len(args) - 1):
                     if (args[i]['T'] == 's'):
                            v = args[i]['V'].__doc__
                            n = args[i]['N'].__doc__
                            vhdFile.write("type state_type" + str(count1) + " is (")
                            if (v.find("str") == 0):
                                   vhdFile.write(args[i]['V'] + ");\n")
                            elif (v.find("list") == 0):
                                   for j in range(len(args[i]['V'])):
                                          if (j == (len(args[i]['V']) - 1)):
                                                 vhdFile.write(args[i]['V'][j] + ");\n") 
                                          else:
                                                 vhdFile.write(args[i]['V'][j] + ", ")

                            if (n.find("str") == 0):
                                   vhdFile.write("signal " + args[i]['N'] + ": state_type" + str(count1) + ";\n")
                            elif (n.find("list") == 0):
                                   vhdFile.write("signal ")
                                   for j in range(0, len(args[i]['N'])):
                                          if (j == (len(args[i]['N']) - 1)):
                                                 vhdFile.write(args[i]['N'][j] + ": state_type" + str(count1) + ";\n")
                                          else:
                                                 vhdFile.write(args[i]['N'][j] + ", ")
                            count1 = count1 + 1
       #----------------------------------------------------------------------------------------------------------------------------------

              vhdFile.write("--------------------------------------------------------------------------\n")

# return all the declared signals in the appropriate lists
#----------------------------------------------------------------------------------------------------------------------------------
       yield signals_i
       yield signals_o
       yield signals_io
       yield signals_intr
       yield signals
#----------------------------------------------------------------------------------------------------------------------------------

