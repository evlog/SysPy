"""
*****************************************************************************
                                                                            *
                    H E A D E R   I N F O R M A T I O N                     *
                                                                            *
*****************************************************************************
Project Name: SysPy (System Python)
              http://cgi.di.uoa.gr/~evlog/syspy.html

File Name:    _IPXACTGenerator.py

Created by:   Evangelos Logaras


*****************************************************************************
                                                                            *
                      C O P Y R I G H T   N O T I C E                       *
                                                                            *
*****************************************************************************

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Lesser General Public
  License as published by the Free Software Foundation; 
  version 2.1 of the License, a copy of which is available from
  http://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
  Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with this library; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  
  USA


*****************************************************************************
                                                                            *
                           D E S C R I P T I O N                            *
                                                                            *
*****************************************************************************

  Generate VHDL testbench template of a module.
"""

import _MyExceptions
reload(_MyExceptions) 
import time
from pdb import *
def VHDLTestbenchGenerator(func, signals_i, signals_o, signals_io, config_options):
       """
       FUNCTION: VHDLTestbenchGenerator(a str, b([], c[], d[], e{})
              a: string name of the design function
              b: input signals' list
              c: input signals' list
              d: input signals' list
              e: dictionary containing configuration file paths
              
       Generate VHDL testbench template of a module.
       """
       
       # Python's variable declarations
       #----------------------------------------------------------------------------------------------------------------------------------

       #----------------------------------------------------------------------------------------------------------------------------------

       # Open VHDL testbench file
       VHDLTestBenchFile = open(config_options["work_dir"] + "/SysPy/work/testbench/" + func + "_tb.vhd", 'w')
       
       # SysPy info for the *.vdh file
       #----------------------------------------------------------------------------------------------------------------------------------       
       VHDLTestBenchFile.write("-- " + func + "_tb.vhd\n")
       VHDLTestBenchFile.write("-- Generated by SysPy\n")
       VHDLTestBenchFile.write("-- " + time.ctime() + "\n")
       VHDLTestBenchFile.write("-- Author: Evangelos Logaras\n\n")
       logoFile = open(config_options["syspy_dir"] + "/funcs/SysPy_logo.txt", 'r')
       logo = logoFile.read()
       VHDLTestBenchFile.write(logo)
       
       VHDLTestBenchFile.write("\n\nlibrary IEEE;\n")
       VHDLTestBenchFile.write("use ieee.std_logic_1164.all;\n")
       VHDLTestBenchFile.write("use ieee.std_logic_arith.all;\n") 
       VHDLTestBenchFile.write("use ieee.std_logic_unsigned.all;\n\n")
       
       VHDLTestBenchFile.write("-- Entity declaration\n")
       VHDLTestBenchFile.write("entity " + func + "_tb is\n")
       VHDLTestBenchFile.write("end " + func + "_tb;\n\n")
       #----------------------------------------------------------------------------------------------------------------------------------

# Extraction of the I/O signals for the architecture component declarations
#----------------------------------------------------------------------------------------------------------------------------------
       VHDLTestBenchFile.write("architecture behavior of " + func + "_tb is\n")
       VHDLTestBenchFile.write("\t-- Component Declaration for the Unit Under Test (UUT)\n")
       VHDLTestBenchFile.write("\tcomponent " + func + "\n")
       VHDLTestBenchFile.write("\tport (\n")
       for i in range(len(signals_io)):
              VHDLTestBenchFile.write("\t\t" + signals_io[i]['N'] + ": ")
              L = signals_io[i]['L'].__doc__
              if (signals_io[i]['D'] == 'i'):
                     VHDLTestBenchFile.write("in ")
              elif (signals_io[i]['D'] == 'o'):
                     VHDLTestBenchFile.write("out ")
              elif (signals_io[i]['D'] == "io"):
                     VHDLTestBenchFile.write("inout ")
              
              if (i != (len(signals_io) - 1)):
                     if (L.find("int") == 0):
                            VHDLTestBenchFile.write("std_logic;\n")
                     elif (L.find("list") == 0):
                            if (signals_io[i]['L'][0] > signals_io[i]['L'][1]): 
                                   VHDLTestBenchFile.write("std_logic_vector(" + str(signals_io[i]['L'][0]) + " downto " + str(signals_io[i]['L'][1]) + ");\n")
                            else:
                                   VHDLTestBenchFile.write("std_logic_vector(" + str(int(signals_io[i]['L'][0])) + " to " + str(int(signals_io[i]['L'][1])) + ");\n")
              else:
                     if (L.find("int") == 0):
                            VHDLTestBenchFile.write("std_logic);\n")
                     elif (L.find("list") == 0):
                            if (signals_io[i]['L'][0] > signals_io[i]['L'][1]): 
                                   VHDLTestBenchFile.write("std_logic_vector(" + str(signals_io[i]['L'][0]) + " downto " + str(int(signals_io[i]['L'][1])) + "));\n")
                            else:
                                   VHDLTestBenchFile.write("std_logic_vector(" + str(int(signals_io[i]['L'][0])) + " to " + str(int(signals_io[i]['L'][1])) + "));\n")
                                   
       VHDLTestBenchFile.write("\tend component;\n\n")
       VHDLTestBenchFile.write("\t-- Clock period definition\n")
       VHDLTestBenchFile.write("\tconstant clock_period: time := 1ns;\n")
       VHDLTestBenchFile.write("begin\n\n")
#----------------------------------------------------------------------------------------------------------------------------------      

# Instantiation of the UUT
#----------------------------------------------------------------------------------------------------------------------------------
       VHDLTestBenchFile.write("\tuut: " + func + " port map (\n")
       for i in range(len(signals_io)):
              if (i == (len(signals_io) - 1)):
                     VHDLTestBenchFile.write("\t\t" + signals_io[i]['N'] + " => " + signals_io[i]['N'] + "\n\t\t);\n\n")
              else:
                     VHDLTestBenchFile.write("\t\t" + signals_io[i]['N'] + " => " + signals_io[i]['N'] + ",\n")
#---------------------------------------------------------------------------------------------------------------------------------- 

# Clock process
#----------------------------------------------------------------------------------------------------------------------------------  
       VHDLTestBenchFile.write("\t-- Clock process with 50% duty cycle\n")
       VHDLTestBenchFile.write("\tclock_process: process\n")
       VHDLTestBenchFile.write("\tbegin\n")
       VHDLTestBenchFile.write("\t\t<clock_name> <= '0'\n")
       VHDLTestBenchFile.write("\t\twait for clock_period / 2;\n")
       VHDLTestBenchFile.write("\t\t<clock_name> <= '1'\n")
       VHDLTestBenchFile.write("\t\twait for clock_period / 2;\n")
       VHDLTestBenchFile.write("\tend process;\n\n")
#----------------------------------------------------------------------------------------------------------------------------------   

# Stimulus process
#----------------------------------------------------------------------------------------------------------------------------------  
       VHDLTestBenchFile.write("\t-- Stimulus process\n")
       VHDLTestBenchFile.write("\tstimulus_process: process\n")
       VHDLTestBenchFile.write("\tbegin\n")
       VHDLTestBenchFile.write("\t\t-- Enter your testbench stimulus here\n")
       VHDLTestBenchFile.write("\tend process;\n\n")
#----------------------------------------------------------------------------------------------------------------------------------     

       VHDLTestBenchFile.write("end;")
       
       VHDLTestBenchFile.close() 
             
                        
                      
