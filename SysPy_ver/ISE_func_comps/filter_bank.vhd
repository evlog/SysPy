-- filter_bank.vhd
-- Generated by PySys
-- Mon Jan 11 04:44:08 2010

library IEEE;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_signed.all;

library work;
use work.PySys_lib.all;

entity filter_bank is
	port (
		clk: in std_logic;
		rst: in std_logic;
		data_present: in std_logic;
		mem_in: in std_logic_vector(17 downto 0);
		read_buffer: out std_logic;
		mem_address: out std_logic_vector(9 downto 0);
		filt_out: out std_logic_vector(18 downto 0));
end filter_bank;

architecture filter_bank_arch of filter_bank is 

-- Internal signals
--------------------------------------------------------------------------
signal filt0_in_int: std_logic_vector(8 downto 0);
signal filt1_in_int: std_logic_vector(8 downto 0);
signal filt0_out_int: std_logic_vector(18 downto 0);
signal filt1_out_int: std_logic_vector(18 downto 0);
signal comp0_int: std_logic_vector(18 downto 0);
signal comp1_int: std_logic_vector(18 downto 0);
signal mem_address_int: integer range 0 to 1023;
type state_type0 is (s0, s1);
signal state: state_type0;
--------------------------------------------------------------------------

component fir_filt_s_comp
	 generic (n ,m: integer);
	 Port (
		clk: in std_logic;
		rst: in std_logic;
		filt_in: in std_logic_vector((n - 1) downto 0);
		filt_param: in std_logic_vector(((m * n) - 1) downto 0);
		filt_out: out std_logic_vector((filt_acc_bus(n, m) - 1) downto 0));
end component;


begin

       proc_0: process(clk, rst) begin
              if rst = '1' then
                     read_buffer  <= '0';
                     mem_address_int  <= 0;
                     filt0_in_int  <= "000000000";
                     filt1_in_int  <= "000000000";
                     state  <= s0;
              elsif rising_edge(clk) then
                     if state = s0 then
                            read_buffer  <= '0';
                            mem_address_int  <= mem_address_int + 1;
                            filt0_in_int  <= "000000000";
                            filt1_in_int  <= "000000000";
                            state  <= s1;
                     elsif state = s1 then
                            if data_present = '1' then
                                   read_buffer  <= '1';
                                   filt0_in_int  <= mem_in(8 downto 0);
                                   filt1_in_int  <= mem_in(17 downto 9);
                                   state  <= s0;
                            elsif data_present = '0' then
                                   read_buffer  <= '0';
                                   filt0_in_int  <= "000000000";
                                   filt1_in_int  <= "000000000";
                                   state  <= s1;
                            end if;
                     else 
                            read_buffer  <= '0';
                            mem_address_int  <= 0;
                            filt0_in_int  <= "000000000";
                            filt1_in_int  <= "000000000";
                            state  <= s0;
                     end if;
              end if;
       end process;

       comp0_int  <= filt0_out_int;
       comp1_int  <= filt1_out_int;
       
       mem_address  <= conv_std_logic_vector(mem_address_int, 10);
       filt_out  <= comp0_int when (filt0_out_int > filt1_out_int) else
               comp1_int when (filt0_out_int <= filt1_out_int);
       
       fir_filt_s_comp_U0: fir_filt_s_comp generic map(n => 9, m => 2)
       port map (
              clk => clk,
              rst => rst,
              filt_in => filt0_in_int,
              filt_param => "111111011000110011",
              filt_out => filt0_out_int);

       fir_filt_s_comp_U1: fir_filt_s_comp generic map(n => 9, m => 2)
       port map (
              clk => clk,
              rst => rst,
              filt_in => filt1_in_int,
              filt_param => "000001001000001111",
              filt_out => filt1_out_int);

end filter_bank_arch;