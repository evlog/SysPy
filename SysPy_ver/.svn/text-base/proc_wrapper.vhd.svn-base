-- proc_wrapper.vhd
-- Generated by SysPy
-- Fri May  6 16:44:52 2011

------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------0---0000---------------------------
--------------------------------------------------------------------0--0----00------------------------
---------------------------------------------------------------------0--0-------00--------------------
-----------------------------------------------------00000000000000000--0---------00------------------
----------------------------------------------------00---------------0--0-----------0-----------------
---------------------------------------------------00----------------0--0------------000000000000000--
----00000000--------------------------000000000----00----------------0--0------------0-------------00-
---00---------------------------------00------000--0-----------0000000--0----------0----------------00
--00----------------------------------00-------00--00--------00------0--0--------00-----------------00
--00-----------00-------0----00000----00-------00--00-------00-------0-0------00--------------------00
---000---------00------00---00--------00------000---00------0-------0--000000-----------------------00
-----000000-----00----00---00---------000000000-----00-----00---------------------------------------00
---------000-----0----00----0000------000------------00---00----------------------------------------00
-----------00----00--00--------0000---00--------------0---0-----------------------------------------00
-----------00-----00-0-----------00---00--------------00-00-----------------------------------------00
----------00------0000-----------00---00---------------000------------------------------------------00
--000000000--------00-------000000----00---------------000------------------------------------------00
-------------------00-----------------00---------------00-------------------------------------------00
------------------00------------------00---------------0--------------------------------------------00
------------------0-------------------00--------------00--------------------------------------------00
-----------------0--------------------00--------------0---------------------------------------------00
--------------------------------------00------------------------------------------------------------00
--------------------------------------00------------------------------------------------------------00
--------------------------------------00------------------------------------------------------------00
---------------------------------------00-----------------------------------------------------------00
----------------------------------------0000000000000000000000000000000000000000000000000000000000000-
-----------------------------------------00000000000000000000000000000000000000000000000000000000000--
------------------------------------------------------------------------------------------------------


library IEEE;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

library work;
entity proc_wrapper is
	port (
		clk: in std_logic;
		rst: in std_logic;
		rxd: in std_logic;
		txd: out std_logic;
		portc: out std_logic_vector(7 downto 0));
end proc_wrapper;

architecture proc_wrapper_arch of proc_wrapper is 

-- Internal signals
--------------------------------------------------------------------------
signal clk_buf: std_logic;
signal clk_div_25MHz_int: std_logic;
signal clk_div_50MHz_int: std_logic;
signal clk_div_100Hz_int: std_logic;
signal rst_int: std_logic;
signal gn: std_logic;
signal t_cts_int: std_logic;
signal t_dpr_int: std_logic;
signal t_write_int: std_logic;
signal t_read_int: std_logic;
signal rst_buf: std_logic;
signal txd_buf: std_logic;
signal rxd_buf: std_logic;
signal porta_int: std_logic_vector(7 downto 0);
signal portb_int: std_logic_vector(7 downto 0);
signal portc_int: std_logic_vector(7 downto 0);
signal portd_int: std_logic_vector(7 downto 0);
signal porta_avr: std_logic_vector(7 downto 0);
signal portb_avr: std_logic_vector(7 downto 0);
signal portc_avr: std_logic_vector(7 downto 0);
signal portd_avr: std_logic_vector(7 downto 0);
signal porte_avr_unus: std_logic_vector(7 downto 0);
signal ddrareg_out_int: std_logic_vector(7 downto 0);
signal ddrbreg_out_int: std_logic_vector(7 downto 0);
signal ddrcreg_out_int: std_logic_vector(7 downto 0);
signal ddrdreg_out_int: std_logic_vector(7 downto 0);
signal ddrereg_out_int: std_logic_vector(7 downto 0);
signal t_data_in_int: std_logic_vector(7 downto 0);
signal t_data_out_int: std_logic_vector(7 downto 0);
signal portc_buf: std_logic_vector(7 downto 0);
signal gnb: std_logic_vector(7 downto 0);
signal porte_int: std_logic_vector(1 downto 0);
signal pine_int: std_logic_vector(1 downto 0);
signal porte_avr: std_logic_vector(1 downto 0);
signal pine_avr: std_logic_vector(1 downto 0);
--------------------------------------------------------------------------

-- Structural components
--------------------------------------------------------------------------
component Leon3_wrapper
	 Port (
		nrst: in std_logic;
		clk: in std_logic);
end component;


component top_avr_core_v8
	 Port (
		nrst: in std_logic;
		clk: in std_logic;
		rxd: in std_logic;
		TMS: in std_logic;
		TCK: in std_logic;
		TDI: in std_logic;
		TRSTn: in std_logic;
		man_rst: in std_logic;
		INTx: in std_logic_vector(7 downto 0);
		txd: out std_logic;
		TDO: out std_logic;
		ddrareg_out: out std_logic_vector(7 downto 0);
		ddrbreg_out: out std_logic_vector(7 downto 0);
		ddrcreg_out: out std_logic_vector(7 downto 0);
		ddrdreg_out: out std_logic_vector(7 downto 0);
		ddrereg_out: out std_logic_vector(7 downto 0);
		porta: inout std_logic_vector(7 downto 0);
		portb: inout std_logic_vector(7 downto 0);
		portc: inout std_logic_vector(7 downto 0);
		portd: inout std_logic_vector(7 downto 0);
		porte: inout std_logic_vector(7 downto 0));
end component;


component sobel
	 Port (
		rst: in std_logic;
		clk: in std_logic;
		t_cts: in std_logic;
		t_dpr: in std_logic;
		data_in: in std_logic_vector(7 downto 0);
		t_write: out std_logic;
		t_read: out std_logic;
		data_out: out std_logic_vector(7 downto 0));
end component;


component bridge
	 generic (n: integer);
	 Port (
		rst: in std_logic;
		clk: in std_logic;
		h_write: in std_logic;
		t_write: in std_logic;
		h_read: in std_logic;
		t_read: in std_logic;
		h_data_in: in std_logic_vector((n - 1) downto 0);
		t_data_in: in std_logic_vector((n - 1) downto 0);
		h_cts: out std_logic;
		t_cts: out std_logic;
		h_dpr: out std_logic;
		t_dpr: out std_logic;
		h_data_out: out std_logic_vector((n - 1) downto 0);
		t_data_out: out std_logic_vector((n - 1) downto 0));
end component;


component clk_div
	 Port (
		rst: in std_logic;
		clk: in std_logic;
		clk_div_25MHz: out std_logic);
end component;

--------------------------------------------------------------------------

begin

       gn  <= '0';
       gnb  <= (others => '0');
       rst_int  <=  not rst_buf;
       
       porta_int  <= porta_avr when (ddrareg_out_int = "11111111") else
               "ZZZZZZZZ";
       portb_avr  <= portb_int when (ddrbreg_out_int = "00000000") else
               "ZZZZZZZZ";
       portc_buf  <= portc_avr when (ddrcreg_out_int = "11111111") else
               "ZZZZZZZZ";
       portc_buf  <= "00000000";
       										
       portd_int  <= portd_avr when (ddrdreg_out_int = "11111111") else
               "ZZZZZZZZ";
       ddrereg_out_int(1 downto 0) <= ;
       porte_int  <= porte_avr when ("11") else
               "ZZ";
       ddrereg_out_int(3 downto 2) <= ;
       pine_avr  <= pine_int when ("00") else
               "ZZ";
       Leon3_wrapper_U0: Leon3_wrapper port map (
              nrst  => rst_int,
              clk  => clk_div_25MHz_int);

       top_avr_core_v8_U1: top_avr_core_v8 port map (
              nrst  => rst_int,
              clk  => clk_div_25MHz_int,
              porta  => porta_avr,
              portb  => portb_avr,
              portc  => portc_avr,
              portd  => portd_avr,
              porte(0) => porte_avr(0),
              porte(1) => porte_avr(1),
              porte(3) => pine_avr(1),
              porte(2) => pine_avr(0),
              porte(7) => porte_avr_unus(7),
              porte(6) => porte_avr_unus(6),
              porte(5) => porte_avr_unus(5),
              porte(4) => porte_avr_unus(4),
              ddrareg_out  => ddrareg_out_int,
              ddrbreg_out  => ddrbreg_out_int,
              ddrcreg_out  => ddrcreg_out_int,
              ddrdreg_out  => ddrdreg_out_int,
              ddrereg_out  => ddrereg_out_int,
              rxd  => rxd_buf,
              txd  => txd_buf,
              INTx  => gnb,
              TMS  => gn,
              TCK  => gn,
              TDI  => gn,
              TDO  => open,
              TRSTn  => rst_int,
              man_rst  => rst_int);

       sobel_U2: sobel port map (
              rst  => rst_buf,
              clk  => clk_div_25MHz_int,
              t_cts  => t_cts_int,
              t_dpr  => t_dpr_int,
              t_write  => t_write_int,
              t_read  => t_read_int,
              data_in  => t_data_out_int,
              data_out  => t_data_in_int);

       bridge_U3: bridge generic map(n  =>  8)       
	port map (
              rst  => rst_buf,
              clk  => clk_buf,
              h_write  => porte_int(0),
              t_write  => t_write_int,
              h_read  => porte_int(1),
              t_read  => t_read_int,
              h_cts  => pine_int(0),
              t_cts  => t_cts_int,
              h_dpr  => pine_int(1),
              t_dpr  => t_dpr_int,
              h_data_in  => porta_int,
              t_data_in  => t_data_in_int,
              h_data_out  => portb_int,
              t_data_out  => t_data_out_int);

       clk_div_U4: clk_div port map (
              clk  => clk_buf,
              rst  => rst_buf,
              clk_div_25MHz  => clk_div_25MHz_int);

end proc_wrapper_arch;