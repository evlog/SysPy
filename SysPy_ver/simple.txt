-- simple.vhd
-- Generated by PySys
-- Wed Dec 30 17:50:59 2009

library IEEE;
use ieee.std_logic_1164.all;
use ieee.std_logic_arith.all;
use ieee.std_logic_unsigned.all;

entity simple is
	port (
		clk_0: in std_logic;
		rst: in std_logic;
		x: in std_logic_vector(3 downto 0);
		y: in std_logic_vector(3 downto 0);
		y1: in std_logic_vector(7 downto 0);
		y2: in std_logic_vector(7 downto 0);
		x0: in std_logic_vector(3 downto 0);
		x1: in std_logic_vector(3 downto 0);
		z: out std_logic_vector(3 downto 0);
		z0: out std_logic_vector(3 downto 0));
end simple;

architecture simple_arch of simple is 

-- Internal signals
--------------------------------------------------------------------------
signal test: std_logic;
signal z1: std_logic_vector(3 downto 0) := "1001";
signal z2: std_logic_vector(3 downto 0) := "1001";
signal sig_int: integer range -10 to 15 := 10;
signal dfr: integer range -10 to 15 := 10;
type state_type0 is (s0, s1, s2, s3);
signal state: state_type0;
--------------------------------------------------------------------------

component fir_filt
	 generics (n ,m: integer);
	 Port (
		clk: in std_logic;
		I: in std_logic_vector((n - 1) downto 0);
		O: out std_logic_vector((n - 1) downto 0));
end component;


component and2
	 generics (n: integer);
	 Port (
		I0: in std_logic_vector((n - 1) downto 0);
		I1: in std_logic_vector((n - 1) downto 0);
		O: out std_logic_vector((n - 1) downto 0));
end component;


component and3
	 Port (
		I0: in std_logic_vector(3 downto 0);
		I1: in std_logic_vector(3 downto 0);
		O: out std_logic_vector(3 downto 0));
end component;


begin

       proc_2: process(clk_0, rst) begin
              if rst = '1' then
                     dfr  <= sig_int +  conv_integer(x);
                     dfr  <= 2;
                     state  <= s0;
              elsif rising_edge(clk_0) then
                     if state = s0 then
                            z  <= "1001";
                            z  <= conv_std_logic_vector(500, 4) + "001";
                            z  <= y1(7 downto 4);
                            dfr  <=  - 3;
                            state  <= s2;
                     elsif state < s2 then
                            z  <= "0001";
                            state  <= s2;
                     elsif state = s2 then
                            z  <= "011" + "010";
                            state  <= s3;
                     elsif state = s3 then
                            z  <= ;
                            dfr  <= 3;
                            state  <= s0;
                     end if;
              end if;
       end process;

              
       fir_filt_comp_uns_U0: fir_filt_comp_uns generic map(n => 8, m => 2)
       port map (
              clk => clk_0,
              rst => rst,
              filt_in => x,
              filt_param => "0000010100000100",
              filt_out => z);

       and2_U1: and2 generic map(n  =>  5)
       port map (
              I0  => x0,
              I1  => x1,
              O  => z0);

       and2_U2: and2 generic map(n  =>  4)
       port map (
              I0  => x0,
              I1  => x1,
              O  => z0);

       and3_U3: and3 port map (
              I0  => x0,
              I1  => x1,
              O  => z0);

end simple_arch;